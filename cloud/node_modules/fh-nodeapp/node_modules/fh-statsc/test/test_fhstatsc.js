var assert = require('assert');
var fhstatsc = require('stats');

exports.checkIFaceDisabled = function () {
  var fhs = fhstatsc.FHStats({});
  assert.ok(fhs.inc, "should be an inc function present");
  assert.ok(fhs.dec, "should be a dec function present");
  assert.ok(fhs.timing, "should be a timing function present");
  assert.ok(fhs.gauge, "should be a gauge function present");
  assert.ok(fhs.close, "should be a close function present");

  fhs.inc('test_counter', function(err) {
    assert.ifError(err);
    fhs.dec('test_counter', function(err) {
      assert.ifError(err);
      fhs.timing('test_counter', 1234, function(err) {
        assert.ifError(err);
        fhs.gauge('test_counter', 27, function(err) {
          assert.ifError(err);
          fhs.close();
        });
      });
    });
  });
};

exports.checkIFaceEnabled = function () {
  var fhs = fhstatsc.FHStats({enabled: true});
  assert.ok(fhs.inc, "should be an inc function present");
  assert.ok(fhs.dec, "should be a dec function present");
  assert.ok(fhs.timing, "should be a timing function present");
  assert.ok(fhs.gauge, "should be a gauge function present");
  assert.ok(fhs.close, "should be a close function present");
  
  fhs.inc('test_counter', function(err) {
    assert.ifError(err);
    fhs.dec('test_counter', function(err) {
      assert.ifError(err);
      fhs.timing('test_counter', 1234, function(err) {
        assert.ifError(err);
        fhs.gauge('test_counter', 27, function(err) {
          assert.ifError(err);
          fhs.close();
        });
      });
    });
  });
};